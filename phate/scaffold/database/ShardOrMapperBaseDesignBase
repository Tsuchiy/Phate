/**
 * %%className%%OrmBaseクラス
 *
 * %%tableName%%のO-RMapper基礎クラス
 *
 * @access  public
 **/
class %%className%%OrmBase extends PhateORMapperBase
{
    protected $_tableName = '%%tableName%%';

    protected $_pkey = array(
%%pkey%%    );
    protected $_pkeyIsRowId = %%pkIsRowId%%;
    protected $_value = array(
%%value%%    );
    protected $_type = array(
%%type%%    );
    protected $_toSave = array(
%%value%%    );

    public function find(%%pkeysArg%% $shardId = null, PhateDBO $dbh = null)
    {
        if (is_null($dbh)) {
            if (is_null($shardId)) {
                throw new PhateDatabaseException('shardId empty');
            }
            $dbh = PhateDB::getInstanceByShardId('%%slaveDatabaseName%%', $shardId);
        }
        $params = array(%%pkeyBindStatement%%);
        $sql = 'SELECT * FROM %%pureTableName%% WHERE %%pkeyWhere%%';
        $sth = $dbh->prepare($sql);
        $i = 0;
        foreach ($params as $column => $value) {
            if (isset($this->_type[$column])) {
                $sth->bindValue(++$i, $value, $this->_type[$column]);
            } else {
                $sth->bindValue(++$i, $value, PDO::PARAM_STR);
            }
        }
        $sth->execute();
        $row = array();
        foreach ($this->_value as $column => $v) {
            if (isset($this->_type[$column])) {
                $sth->bindColumn($column, $row[$column], $this->_type[$column]);
            } else {
                $sth->bindColumn($column, $row[$column]);
            }
        }
        if (($sth->fetch(PDO::FETCH_BOUND)) === false) {
            return false;
        }
        $this->hydrate($row);
        return true;
    }

